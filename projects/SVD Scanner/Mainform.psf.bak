<File version="2.1">
  <FileID>0876bef3-066d-43f4-9049-0d5486f4d83d</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAFuOSURBVHhe7b0HeJTrfebta727zu5mvzhx9ku8
3s0mjteJ42ziJF/iOFk7iR3HPs3Hp3IOh96LaCo0FVChSTQBAtFBgAAhgZBEEep91Htvo+kzkmY0
o17g/p7nlQQC5HOYw8FohvvH9bs05Xmf9513hvnfz9vmS4QQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEPBOnv/zlL6v+9E++rfL09FZt3eqn2rLFl1JKKaUu
4tatvqqAgG2qd9/5peorX/mKStR26afz5S//u+o333gD5y9dQ3FtBxo0NtSpuyillFLqItZ3dCtm
F1Zi46bN+J3f+W1MlPlfzbe//S3V2QsxKG/rRmZ5G9JKm5FOKaWUUpcyraQZ+XUGFFW34oMPPvzs
AODp6akqqetAVmU7sspbKaWUUuqiZpa1oKKtC5evXv/sAODnt03VanQgQ0yYXdFGKaWUUhc1U9Ty
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
a1Z+yckLtshjDOQmZFdQjtLkF/R0r+dV9Vdfxpk6qzxaebp1TCl9sTIAvARlCJg8zsBVnO51vMrK
rSHTrSfqvNyyROnLkQGAUkopfQX9QgOAPAhOXvhGdkoppZTSmav8nZiO5w0A9WJCabvoSKYJSiml
lM5wzXY06ceL/3MHAJkiKKWUUuoaysIv6/fnCgB1E7sAKKWUUuqa1gqfOQD4+fkX9j+AMgGllFJK
XVe9sB9AQlLyZweAJUuXld1MvIuYuJtKYqCUUkqp65qQdBe7dod9dgAghBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIa88X/rS/w/Pxt/jebm1JQAAAABJRU5E
rkJggg==</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="MainForm" children="Controls">
    <Property name="AutoScaleDimensions">6, 13</Property>
    <Property name="AutoScaleMode">Font</Property>
    <Property name="ClientSize">814, 469</Property>
    <Property name="Name">MainForm</Property>
    <Property name="StartPosition">CenterScreen</Property>
    <Property name="Text">SVD Scanner</Property>
    <Event name="Load">MainForm_Load</Event>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonPingTest" children="Controls">
      <Property name="Location">122, 440</Property>
      <Property name="Name">buttonPingTest</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">23</Property>
      <Property name="Text">Ping Test</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonPingTest_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonSearchResults" children="Controls">
      <Property name="Location">208, 383</Property>
      <Property name="Name">buttonSearchResults</Property>
      <Property name="Size">87, 23</Property>
      <Property name="TabIndex">22</Property>
      <Property name="Text">Search Results</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonSearchResults_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="textbox2" children="Controls">
      <Property name="Location">9, 17</Property>
      <Property name="Multiline">True</Property>
      <Property name="Name">textbox2</Property>
      <Property name="ReadOnly">True</Property>
      <Property name="Size">286, 234</Property>
      <Property name="TabIndex">21</Property>
      <Property name="TextAlign">Center</Property>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonScanList" children="Controls">
      <Property name="Location">9, 290</Property>
      <Property name="Name">buttonScanList</Property>
      <Property name="Size">109, 23</Property>
      <Property name="TabIndex">20</Property>
      <Property name="Text">Scan List</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonScanList_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonTroubleshooting" children="Controls">
      <Property name="Location">307, 440</Property>
      <Property name="Name">buttonTroubleshooting</Property>
      <Property name="Size">140, 23</Property>
      <Property name="TabIndex">19</Property>
      <Property name="Text">Troubleshooting</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonTroubleshooting_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelCompleted00" children="Controls">
      <Property name="AutoSize">True</Property>
      <Property name="Font">Microsoft Sans Serif, 15pt</Property>
      <Property name="ForeColor">192, 0, 0</Property>
      <Property name="Location">301, 412</Property>
      <Property name="Name">labelCompleted00</Property>
      <Property name="Size">146, 25</Property>
      <Property name="TabIndex">18</Property>
      <Property name="Text">Completed: 0/0</Property>
    </Object>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelChristianCrillEngili" children="Controls">
      <Property name="AutoSize">True</Property>
      <Property name="Location">9, 444</Property>
      <Property name="Name">labelChristianCrillEngili</Property>
      <Property name="Size">108, 13</Property>
      <Property name="TabIndex">16</Property>
      <Property name="Text">Christian Crill - Engility</Property>
    </Object>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="label2" children="Controls">
      <Property name="AutoSize">True</Property>
      <Property name="Location">-78, 450</Property>
      <Property name="Name">label2</Property>
      <Property name="Size">35, 13</Property>
      <Property name="TabIndex">15</Property>
      <Property name="Text">label2</Property>
    </Object>
    <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="datagridview1" children="Controls">
      <Property name="AllowUserToOrderColumns">True</Property>
      <Property name="ColumnHeadersHeightSizeMode">AutoSize</Property>
      <Property name="Location">301, 17</Property>
      <Property name="Name">datagridview1</Property>
      <Property name="Size">501, 389</Property>
      <Property name="TabIndex">14</Property>
    </Object>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="label1" children="Controls">
      <Property name="AutoSize">True</Property>
      <Property name="Location">23, 13</Property>
      <Property name="Name">label1</Property>
      <Property name="Size">0, 13</Property>
      <Property name="TabIndex">11</Property>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonSaveAs" children="Controls">
      <Property name="Location">634, 412</Property>
      <Property name="Name">buttonSaveAs</Property>
      <Property name="Size">168, 45</Property>
      <Property name="TabIndex">10</Property>
      <Property name="Text">Save As</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonSaveAs_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonScanDomain" children="Controls">
      <Property name="Location">9, 261</Property>
      <Property name="Name">buttonScanDomain</Property>
      <Property name="Size">109, 23</Property>
      <Property name="TabIndex">9</Property>
      <Property name="Text">Scan Domain</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonScanDomain_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="textbox3" children="Controls">
      <Property name="Location">124, 321</Property>
      <Property name="Name">textbox3</Property>
      <Property name="Size">171, 20</Property>
      <Property name="TabIndex">8</Property>
    </Object>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelTargetOrCommaseparat" children="Controls">
      <Property name="AutoSize">True</Property>
      <Property name="Location">122, 344</Property>
      <Property name="Name">labelTargetOrCommaseparat</Property>
      <Property name="Size">173, 13</Property>
      <Property name="TabIndex">7</Property>
      <Property name="Text">Target or Comma-separated targets</Property>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonScanTarget" children="Controls">
      <Property name="CausesValidation">False</Property>
      <Property name="Location">9, 318</Property>
      <Property name="Name">buttonScanTarget</Property>
      <Property name="Size">109, 23</Property>
      <Property name="TabIndex">6</Property>
      <Property name="Text">Scan Target</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonScanTarget_Click</Event>
    </Object>
  </Object>
  <Object type="System.Windows.Forms.SaveFileDialog, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="savefiledialog1">
    <Event name="FileOk">savefiledialog1_FileOk</Event>
  </Object>
  <Object type="System.Windows.Forms.OpenFileDialog, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="openfiledialog1">
    <Property name="FileName">openfiledialog1</Property>
    <Event name="FileOk">openfiledialog1_FileOk</Event>
  </Object>
  <Code><![CDATA[
$MainForm_Load={
	#TODO: Initialize Form Controls here
	$nl = [Environment]::NewLine
	$textbox2.Text = "SVD Scanner $nl Must be run as the user with desired credentials."
}
$textbox3.Text = "$($Env:COMPUTERNAME)"

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Item,
		[Parameter(Mandatory = $false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param (
		[ValidateNotNull()]
		$InputObject,
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
	
	if ($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @( ,$Table)
}
#endregion

$buttonScanDomain_Click={
	#TODO: Place custom script here
	Try
	{
		Import-Module ActiveDirectory
		$Comps = Get-ADComputer -Filter *
	}
	Catch
	{
		$Comps = Get-ADComputer-LDAP
	}
	
	$Program = "*"
	$Scriptblock = {
		$ErrorActionPreference = 'Stop'
		TRY
		{
			IF (Test-Connection $args[0] -Quiet -Count 1 -BufferSize 16)
			{
				# x64 Registry Scan
				$Ping = "Online"
				$Success = "True"
				$RegPath = "Software\\Wow6432Node\\Microsoft\\Windows\CurrentVersion\\Uninstall"
				$Reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $args[0])
				$RegKey = $Reg.OpenSubKey($RegPath)
				$SubKeys = $RegKey.GetSubKeyNames()
				$Array = @()
				Foreach ($Key in $SubKeys)
				{
					$ThisKey = $RegPath + "\\" + $Key
					$ThisSubKey = $Reg.OpenSubKey($ThisKey)
					$Program_Name = $ThisSubKey.GetValue("DisplayName")
					$Display_Version = $ThisSubKey.GetValue("DisplayVersion")
					$Publisher = $ThisSubKey.GetValue("Publisher")
					$CombinedValue = "$($args[0])" + "//" + "$($Publisher)" + "//" + "$($($Program_Name | where { $_.length -ne 0 }))" + "//" + "$($Display_Version)"
					$CombinedValue = $CombinedValue | Select -Unique
					$array += $CombinedValue | where {$_ -ne "////////" -and $_.length -ne 0}
				}
				# x86 Registry Scan
				$RegPath = "Software\\Microsoft\\Windows\CurrentVersion\\Uninstall"
				$Reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $args[0])
				$RegKey = $Reg.OpenSubKey($RegPath)
				$SubKeys = $RegKey.GetSubKeyNames()
				Foreach ($Key in $SubKeys)
				{
					$ThisKey = $RegPath + "\\" + $Key
					$ThisSubKey = $Reg.OpenSubKey($ThisKey)
					$Program_Name = $ThisSubKey.GetValue("DisplayName")
					$Display_Version = $ThisSubKey.GetValue("DisplayVersion")
					$Publisher = $ThisSubKey.GetValue("Publisher")
					$CombinedValue = "$($args[0])" + "//" + "$($Publisher)" + "//" + "$($($Program_Name | where { $_.length -ne 0 }))" + "//" + "$($Display_Version)"
					$CombinedValue = $CombinedValue | Select -Unique
					$array += $CombinedValue | where { $_ -ne "////////" -and $_.length -ne 0 }
				}
				# Combine Results and build output
				$Masterarray = @()
				$Array = $Array | select -Unique
				Foreach ($obj in $array)
				{
					$RemoteObj = New-Object PSCustomObject
					$RemoteObj | Add-Member -MemberType NoteProperty -Name "Computer" -Value ($obj -split "//")[0]
					$RemoteObj | Add-Member -MemberType NoteProperty -Name "Vendor" -Value ($obj -split "//")[1]
					$RemoteObj | Add-Member -MemberType NoteProperty -Name "Program" -Value ($obj -split "//")[2]
					$RemoteObj | Add-Member -MemberType NoteProperty -Name "Version" -Value ($obj -split "//")[3]
					$Masterarray += $RemoteObj
				}
			}
			ELSE
			{
				$Ping = "Offline"	
			}
		}
		Catch
		{
			$stop = $Error.Exception.Message
			$Success = "False"
		}
		# Print to console
		$Masterarray
	}
	
	$Outcome = Start-Runspace -Target $Comps -Scriptblock $Scriptblock
	
	# Parse into final form
	$FinalArray = @()
	foreach ($obj in $Outcome | where { $_.Program.length -ne 0 })
	{
		$RemoteObj = New-Object PSCustomObject
		$RemoteObj | Add-Member -MemberType NoteProperty -Name "Computer" -Value $obj.computer
		$RemoteObj | Add-Member -MemberType NoteProperty -Name "Vendor" -Value $obj.Vendor
		$RemoteObj | Add-Member -MemberType NoteProperty -Name "Program" -Value $obj.Program
		$RemoteObj | Add-Member -MemberType NoteProperty -Name "Version" -Value $obj.Version
		$FinalArray += $RemoteObj
	}
	$Outcome = $FinalArray
	$Outcome = $Outcome | Select-Object -Property * -ExcludeProperty RunspaceID
	$script:results = $Outcome
	$Datatable = ConvertTo-DataTable $Outcome
	Update-DataGridView -DataGridView $datagridview1 $Datatable
	
	$CompletedScans = ($Outcome.Computer | select -Unique).count
	$labelCompleted00.Text = "Completed: $CompletedScans / $(($Comps).count)"
	
	$script:MissingComputers = Compare-Object -ReferenceObject $Comps.name -DifferenceObject $Outcome.Computer | where { $_.sideIndicator -eq "<=" } | select InputObject
	
}


$buttonScanTarget_Click={
	#TODO: Place custom script here
	$Comps = ($textbox3.Text).Split(",")
	
	$Program = "*"
	$Scriptblock = {
		$ErrorActionPreference = 'Stop'
		TRY
		{
			IF (Test-Connection $args[0] -Quiet -Count 1 -BufferSize 16)
			{
				# x64 Registry Scan
				$Ping = "Online"
				$Success = "True"
				$RegPath = "Software\\Wow6432Node\\Microsoft\\Windows\CurrentVersion\\Uninstall"
				$Reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $args[0])
				$RegKey = $Reg.OpenSubKey($RegPath)
				$SubKeys = $RegKey.GetSubKeyNames()
				$Array = @()
				Foreach ($Key in $SubKeys)
				{
					$ThisKey = $RegPath + "\\" + $Key
					$ThisSubKey = $Reg.OpenSubKey($ThisKey)
					$Program_Name = $ThisSubKey.GetValue("DisplayName")
					$Display_Version = $ThisSubKey.GetValue("DisplayVersion")
					$Publisher = $ThisSubKey.GetValue("Publisher")
					$CombinedValue = "$($args[0])" + "//" + "$($Publisher)" + "//" + "$($($Program_Name | where { $_.length -ne 0 }))" + "//" + "$($Display_Version)"
					$CombinedValue = $CombinedValue | Select -Unique
					$array += $CombinedValue | where { $_ -ne "////////" -and $_.length -ne 0 }
				}
				# x86 Registry Scan
				$RegPath = "Software\\Microsoft\\Windows\CurrentVersion\\Uninstall"
				$Reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $args[0])
				$RegKey = $Reg.OpenSubKey($RegPath)
				$SubKeys = $RegKey.GetSubKeyNames()
				Foreach ($Key in $SubKeys)
				{
					$ThisKey = $RegPath + "\\" + $Key
					$ThisSubKey = $Reg.OpenSubKey($ThisKey)
					$Program_Name = $ThisSubKey.GetValue("DisplayName")
					$Display_Version = $ThisSubKey.GetValue("DisplayVersion")
					$Publisher = $ThisSubKey.GetValue("Publisher")
					$CombinedValue = "$($args[0])" + "//" + "$($Publisher)" + "//" + "$($($Program_Name | where { $_.length -ne 0 }))" + "//" + "$($Display_Version)"
					$CombinedValue = $CombinedValue | Select -Unique
					$array += $CombinedValue | where { $_ -ne "////////" -and $_.length -ne 0 }
				}
				# Combine Results and build output
				$Masterarray = @()
				$Array = $Array | select -Unique
				Foreach ($obj in $array)
				{
					$RemoteObj = New-Object PSCustomObject
					$RemoteObj | Add-Member -MemberType NoteProperty -Name "Computer" -Value ($obj -split "//")[0]
					$RemoteObj | Add-Member -MemberType NoteProperty -Name "Vendor" -Value ($obj -split "//")[1]
					$RemoteObj | Add-Member -MemberType NoteProperty -Name "Version" -Value ($obj -split "//")[3]
					$RemoteObj | Add-Member -MemberType NoteProperty -Name "Program" -Value ($obj -split "//")[2]
					$Masterarray += $RemoteObj
				}
			}
			ELSE
			{
				$Ping = "Offline"
			}
		}
		Catch
		{
			$stop = $Error.Exception.Message
			$Success = "False"
		}
		# Print to console
		$Masterarray
	}
	
	$Outcome = Start-Runspace -Target $Comps -Scriptblock $Scriptblock
	
	# Parse into final form
	$FinalArray = @()
	foreach ($obj in $Outcome | where { $_.Program.length -ne 0 })
	{
		$RemoteObj = New-Object PSCustomObject
		$RemoteObj | Add-Member -MemberType NoteProperty -Name "Computer" -Value $obj.computer
		$RemoteObj | Add-Member -MemberType NoteProperty -Name "Vendor" -Value $obj.Vendor
		$RemoteObj | Add-Member -MemberType NoteProperty -Name "Version" -Value $obj.Version
		$RemoteObj | Add-Member -MemberType NoteProperty -Name "Program" -Value $obj.Program
		$FinalArray += $RemoteObj
	}
	$Outcome = $FinalArray
	$Outcome = $Outcome | Select-Object -Property * -ExcludeProperty RunspaceID
	$script:results = $Outcome
	$Datatable = ConvertTo-DataTable $Outcome
	Update-DataGridView -DataGridView $datagridview1 $Datatable
	
	$CompletedScans = ($Outcome.Computer | select -Unique).count
	$labelCompleted00.Text = "Completed: $CompletedScans / $(($Comps).count)"
	$script:MissingComputers = Compare-Object -ReferenceObject $Comps -DifferenceObject $Outcome.Computer | where { $_.sideIndicator -eq "<=" } | select InputObject
	
}

$buttonSaveAs_Click={
	#TODO: Place custom script here
	$date = Get-Date -UFormat "%d-%b-%g %H%M"
	$savefiledialog1.FileName = "VSE SVD Scan - $($date)"
	$savefiledialog1.DefaultExt = ".csv"
	$savefiledialog1.CheckFileExists = $false
	$savefiledialog1.ShowDialog()
}


$savefiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	[void][system.Windows.Forms.MessageBox]::Show[$savefiledialog1.FileName]
	$script:results | Export-Csv -NoTypeInformation -Path $savefiledialog1.FileName 
}

$buttonTroubleshooting_Click={
	#TODO: Place custom script here
	Show-MissingComputers_psf
}

$textbox2_TextChanged={
	#TODO: Place custom script here
	
}

$buttonScanList_Click={
	#TODO: Place custom script here
	$openfiledialog1.ShowDialog()
	#TODO: Place custom script here
	$Comps = Get-Content -Path "$($openfiledialog1.FileName)"
	
	$Program = "*"
	$Scriptblock = {
		$ErrorActionPreference = 'Stop'
		TRY
		{
			IF (Test-Connection $args[0] -Quiet -Count 1 -BufferSize 16)
			{
				# x64 Registry Scan
				$Ping = "Online"
				$Success = "True"
				$RegPath = "Software\\Wow6432Node\\Microsoft\\Windows\CurrentVersion\\Uninstall"
				$Reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $args[0])
				$RegKey = $Reg.OpenSubKey($RegPath)
				$SubKeys = $RegKey.GetSubKeyNames()
				$Array = @()
				Foreach ($Key in $SubKeys)
				{
					$ThisKey = $RegPath + "\\" + $Key
					$ThisSubKey = $Reg.OpenSubKey($ThisKey)
					$Program_Name = $ThisSubKey.GetValue("DisplayName")
					$Display_Version = $ThisSubKey.GetValue("DisplayVersion")
					$Publisher = $ThisSubKey.GetValue("Publisher")
					$CombinedValue = "$($args[0])" + "//" + "$($Publisher)" + "//" + "$($($Program_Name | where { $_.length -ne 0 }))" + "//" + "$($Display_Version)"
					$CombinedValue = $CombinedValue | Select -Unique
					$array += $CombinedValue | where { $_ -ne "////////" -and $_.length -ne 0 }
				}
				# x86 Registry Scan
				$RegPath = "Software\\Microsoft\\Windows\CurrentVersion\\Uninstall"
				$Reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $args[0])
				$RegKey = $Reg.OpenSubKey($RegPath)
				$SubKeys = $RegKey.GetSubKeyNames()
				Foreach ($Key in $SubKeys)
				{
					$ThisKey = $RegPath + "\\" + $Key
					$ThisSubKey = $Reg.OpenSubKey($ThisKey)
					$Program_Name = $ThisSubKey.GetValue("DisplayName")
					$Display_Version = $ThisSubKey.GetValue("DisplayVersion")
					$Publisher = $ThisSubKey.GetValue("Publisher")
					$CombinedValue = "$($args[0])" + "//" + "$($Publisher)" + "//" + "$($($Program_Name | where { $_.length -ne 0 }))" + "//" + "$($Display_Version)"
					$CombinedValue = $CombinedValue | Select -Unique
					$array += $CombinedValue | where { $_ -ne "////////" -and $_.length -ne 0 }
				}
				# Combine Results and build output
				$Masterarray = @()
				$Array = $Array | select -Unique
				Foreach ($obj in $array)
				{
					$RemoteObj = New-Object PSCustomObject
					$RemoteObj | Add-Member -MemberType NoteProperty -Name "Computer" -Value ($obj -split "//")[0]
					$RemoteObj | Add-Member -MemberType NoteProperty -Name "Vendor" -Value ($obj -split "//")[1]
					$RemoteObj | Add-Member -MemberType NoteProperty -Name "Version" -Value ($obj -split "//")[3]
					$RemoteObj | Add-Member -MemberType NoteProperty -Name "Program" -Value ($obj -split "//")[2]
					$Masterarray += $RemoteObj
				}
			}
			ELSE
			{
				$Ping = "Offline"
			}
		}
		Catch
		{
			$stop = $Error.Exception.Message
			$Success = "False"
		}
		# Print to console
		$Masterarray
	}
	
	$Outcome = Start-Runspace -Target $Comps -Scriptblock $Scriptblock
	
	# Parse into final form
	$FinalArray = @()
	foreach ($obj in $Outcome | where { $_.Program.length -ne 0 })
	{
		$RemoteObj = New-Object PSCustomObject
		$RemoteObj | Add-Member -MemberType NoteProperty -Name "Computer" -Value $obj.computer
		$RemoteObj | Add-Member -MemberType NoteProperty -Name "Vendor" -Value $obj.Vendor
		$RemoteObj | Add-Member -MemberType NoteProperty -Name "Version" -Value $obj.Version
		$RemoteObj | Add-Member -MemberType NoteProperty -Name "Program" -Value $obj.Program
		$FinalArray += $RemoteObj
	}
	$Outcome = $FinalArray
	$Outcome = $Outcome | Select-Object -Property * -ExcludeProperty RunspaceID
	$script:results = $Outcome
	$Datatable = ConvertTo-DataTable $Outcome
	Update-DataGridView -DataGridView $datagridview1 $Datatable
	
	$CompletedScans = ($Outcome.Computer | select -Unique).count
	$labelCompleted00.Text = "Completed: $CompletedScans / $(($Comps).count)"
	$script:MissingComputers = Compare-Object -ReferenceObject $Comps -DifferenceObject $Outcome.Computer | where { $_.sideIndicator -eq "<=" } | select InputObject
	
	
}

$openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}
$buttonSearchResults_Click={
	#TODO: Place custom script here
	$script:results | Out-GridView
}

$buttonPingTest_Click={
	#TODO: Place custom script here
	$Comps = Get-ADComputer-LDAP

	$scriptblock = {
		$ping = Test-Connection -Quiet -ComputerName $args[0] -Count 1
		$RemoteObj = New-Object PSCustomObject
		$RemoteObj | Add-Member -MemberType NoteProperty -Name Computer -Value $args[0]
		$RemoteObj | Add-Member -MemberType NoteProperty -Name Online -Value $ping
		$RemoteObj
	}
	
	$Outcome = Start-Runspace -Target $Comps -Scriptblock $scriptblock
	$Datatable = ConvertTo-DataTable $Outcome
	Update-DataGridView -DataGridView $datagridview1 $Datatable
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  </Assemblies>
</File>