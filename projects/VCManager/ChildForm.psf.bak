<File version="2.1">
  <FileID>89f7d3ae-330e-458c-9f87-7499b7f2e479</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAGPpSURBVHhe7b1ncCTZYeepi7gvex827sNeXNxG
3Eq3e0tdxIparU4rkRKX0omkHCWRIikOyRmSw+GYnpk2096hG+hGN7wHGt5774GG995771EeQKNh
2pv/vZcAetDdNTXomZqZh8L/h/gHstLny6p8v8x6mfU7hBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIUR1zvzxH/9Rjm9AcE5waGROYHAYwzAMwzD7LKERMTmXLrnk/K//9t/mbNfv
tvn6179enl9Wj8GF2xiYu4WB2RWGYRiGYfZZBudXMSzqcncvf2xX8bbxCwjJGV5cR13vjMg0wzAM
wzD7NE1Di+gYmt2bAIRFxOSM6tbR0DeLxn6GYRiGOXhpGphD0+C8Vhc2iNd7jlZ3zqFZTCvn8ZVM
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</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="formVCenterManager" children="Controls">
    <Property name="AutoScaleDimensions">8, 17</Property>
    <Property name="AutoScaleMode">Font</Property>
    <Property name="ClientSize">1367, 751</Property>
    <Property name="Margin">5, 5, 5, 5</Property>
    <Property name="Name">formVCenterManager</Property>
    <Property name="StartPosition">CenterParent</Property>
    <Property name="Text">vCenter Manager</Property>
    <Event name="Load">formVCenterManager_Load</Event>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonPowerOnVM" children="Controls">
      <Property name="Location">253, 318</Property>
      <Property name="Margin">4, 4, 4, 4</Property>
      <Property name="Name">buttonPowerOnVM</Property>
      <Property name="Size">171, 51</Property>
      <Property name="TabIndex">27</Property>
      <Property name="Text">Power On VM</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonPowerOnVM_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonShutdownVM" children="Controls">
      <Property name="Location">77, 318</Property>
      <Property name="Margin">4, 4, 4, 4</Property>
      <Property name="Name">buttonShutdownVM</Property>
      <Property name="Size">168, 51</Property>
      <Property name="TabIndex">26</Property>
      <Property name="Text">Shutdown VM</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonShutdownVM_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonCreateOVA" children="Controls">
      <Property name="Location">77, 377</Property>
      <Property name="Margin">4, 4, 4, 4</Property>
      <Property name="Name">buttonCreateOVA</Property>
      <Property name="Size">347, 51</Property>
      <Property name="TabIndex">25</Property>
      <Property name="Text">Create OVA</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonCreateOVA_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="button1CitrixUnSelect" children="Controls">
      <Property name="Location">1160, 612</Property>
      <Property name="Margin">4, 4, 4, 4</Property>
      <Property name="Name">button1CitrixUnSelect</Property>
      <Property name="Size">109, 27</Property>
      <Property name="TabIndex">24</Property>
      <Property name="Text">Un-Select All</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">button1CitrixUnSelect_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="button2CitrixSelect" children="Controls">
      <Property name="Location">1043, 612</Property>
      <Property name="Margin">4, 4, 4, 4</Property>
      <Property name="Name">button2CitrixSelect</Property>
      <Property name="Size">109, 27</Property>
      <Property name="TabIndex">23</Property>
      <Property name="Text">Select All</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">button2CitrixSelect_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelCitrixClients" children="Controls">
      <Property name="AutoSize">True</Property>
      <Property name="Font">Microsoft Sans Serif, 10pt, style=Bold</Property>
      <Property name="Location">1021, 4</Property>
      <Property name="Margin">4, 0, 4, 0</Property>
      <Property name="Name">labelCitrixClients</Property>
      <Property name="Size">119, 20</Property>
      <Property name="TabIndex">22</Property>
      <Property name="Text">Citrix Clients</Property>
    </Object>
    <Object type="System.Windows.Forms.CheckedListBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="checkedlistbox3" children="Controls">
      <Property name="FormattingEnabled">True</Property>
      <Property name="Location">1021, 30</Property>
      <Property name="Margin">5, 5, 5, 5</Property>
      <Property name="Name">checkedlistbox3</Property>
      <Property name="Size">268, 742</Property>
      <Property name="TabIndex">21</Property>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="button1TemplateUnslctAll" children="Controls">
      <Property name="Location">887, 612</Property>
      <Property name="Margin">4, 4, 4, 4</Property>
      <Property name="Name">button1TemplateUnslctAll</Property>
      <Property name="Size">109, 27</Property>
      <Property name="TabIndex">20</Property>
      <Property name="Text">Un-Select All</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">button1TemplateUnslctAll_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="button2TemplateSlctAll" children="Controls">
      <Property name="Location">769, 612</Property>
      <Property name="Margin">4, 4, 4, 4</Property>
      <Property name="Name">button2TemplateSlctAll</Property>
      <Property name="Size">109, 27</Property>
      <Property name="TabIndex">19</Property>
      <Property name="Text">Select All</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">button2TemplateSlctAll_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelNonTemplates" children="Controls">
      <Property name="AutoSize">True</Property>
      <Property name="Font">Microsoft Sans Serif, 10pt, style=Bold</Property>
      <Property name="Location">467, 3</Property>
      <Property name="Margin">4, 0, 4, 0</Property>
      <Property name="Name">labelNonTemplates</Property>
      <Property name="Size">136, 20</Property>
      <Property name="TabIndex">18</Property>
      <Property name="Text">Non-Templates</Property>
    </Object>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelTemplates" children="Controls">
      <Property name="AutoSize">True</Property>
      <Property name="Font">Microsoft Sans Serif, 10pt, style=Bold</Property>
      <Property name="Location">744, 4</Property>
      <Property name="Margin">4, 0, 4, 0</Property>
      <Property name="Name">labelTemplates</Property>
      <Property name="Size">96, 20</Property>
      <Property name="TabIndex">17</Property>
      <Property name="Text">Templates</Property>
    </Object>
    <Object type="System.Windows.Forms.CheckedListBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="checkedlistbox2" children="Controls">
      <Property name="FormattingEnabled">True</Property>
      <Property name="Location">744, 30</Property>
      <Property name="Margin">5, 5, 5, 5</Property>
      <Property name="Name">checkedlistbox2</Property>
      <Property name="Size">268, 742</Property>
      <Property name="TabIndex">16</Property>
    </Object>
    <Object type="System.Windows.Forms.CheckBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="checkboxUnlockAdvancedTools" children="Controls">
      <Property name="Location">77, 573</Property>
      <Property name="Margin">4, 4, 4, 4</Property>
      <Property name="Name">checkboxUnlockAdvancedTools</Property>
      <Property name="Size">207, 31</Property>
      <Property name="TabIndex">15</Property>
      <Property name="Text">Unlock Advanced Tools</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="CheckStateChanged">checkboxUnlockAdvancedTools_CheckStateChanged</Event>
    </Object>
    <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="textbox1" children="Controls">
      <Property name="BorderStyle">None</Property>
      <Property name="Location">77, 17</Property>
      <Property name="Margin">5, 5, 5, 5</Property>
      <Property name="Multiline">True</Property>
      <Property name="Name">textbox1</Property>
      <Property name="ReadOnly">True</Property>
      <Property name="Size">344, 229</Property>
      <Property name="TabIndex">14</Property>
      <Property name="TextAlign">Center</Property>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonUnselectAll" children="Controls">
      <Property name="Location">609, 612</Property>
      <Property name="Margin">4, 4, 4, 4</Property>
      <Property name="Name">buttonUnselectAll</Property>
      <Property name="Size">109, 26</Property>
      <Property name="TabIndex">12</Property>
      <Property name="Text">Un-Select All</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonUnselectAll_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonSelectAll" children="Controls">
      <Property name="Location">492, 612</Property>
      <Property name="Margin">4, 4, 4, 4</Property>
      <Property name="Name">buttonSelectAll</Property>
      <Property name="Size">109, 27</Property>
      <Property name="TabIndex">11</Property>
      <Property name="Text">Select All</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonSelectAll_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.CheckedListBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="checkedlistbox1" children="Controls">
      <Property name="FormattingEnabled">True</Property>
      <Property name="Location">467, 30</Property>
      <Property name="Margin">5, 5, 5, 5</Property>
      <Property name="Name">checkedlistbox1</Property>
      <Property name="Size">268, 742</Property>
      <Property name="TabIndex">10</Property>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonDeleteAllButLast3Sna" children="Controls">
      <Property name="Location">77, 259</Property>
      <Property name="Margin">4, 4, 4, 4</Property>
      <Property name="Name">buttonDeleteAllButLast3Sna</Property>
      <Property name="Size">168, 51</Property>
      <Property name="TabIndex">9</Property>
      <Property name="Text">Delete All But Last 3 Snapshots</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonDeleteAllButLast3Sna_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonDeleteAllButCurrentS" children="Controls">
      <Property name="Location">253, 259</Property>
      <Property name="Margin">4, 4, 4, 4</Property>
      <Property name="Name">buttonDeleteAllButCurrentS</Property>
      <Property name="Size">167, 51</Property>
      <Property name="TabIndex">8</Property>
      <Property name="Text">Delete All But Current Snapshot</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonDeleteAllButCurrentS_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonDeleteAllSnapshots" children="Controls">
      <Property name="Location">253, 200</Property>
      <Property name="Margin">4, 4, 4, 4</Property>
      <Property name="Name">buttonDeleteAllSnapshots</Property>
      <Property name="Size">167, 51</Property>
      <Property name="TabIndex">7</Property>
      <Property name="Text">Delete All Snapshots</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonDeleteAllSnapshots_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonCreateNewSnapshot" children="Controls">
      <Property name="Location">76, 200</Property>
      <Property name="Margin">4, 4, 4, 4</Property>
      <Property name="Name">buttonCreateNewSnapshot</Property>
      <Property name="Size">169, 51</Property>
      <Property name="TabIndex">6</Property>
      <Property name="Text">Create New Snapshot</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonCreateNewSnapshot_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonASPPowerOn" children="Controls">
      <Property name="Location">77, 670</Property>
      <Property name="Margin">4, 4, 4, 4</Property>
      <Property name="Name">buttonASPPowerOn</Property>
      <Property name="Size">347, 50</Property>
      <Property name="TabIndex">4</Property>
      <Property name="Text">ASP Power On</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonASPPowerOn_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonASPPowerOff" children="Controls">
      <Property name="Location">76, 612</Property>
      <Property name="Margin">4, 4, 4, 4</Property>
      <Property name="Name">buttonASPPowerOff</Property>
      <Property name="Size">347, 50</Property>
      <Property name="TabIndex">3</Property>
      <Property name="Text">ASP Power Off</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonASPPowerOff_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonDisconnect" children="Controls">
      <Property name="Anchor">Bottom, Right</Property>
      <Property name="DialogResult">OK</Property>
      <Property name="Location">1171, 688</Property>
      <Property name="Margin">4, 4, 4, 4</Property>
      <Property name="Name">buttonDisconnect</Property>
      <Property name="Size">180, 47</Property>
      <Property name="TabIndex">1</Property>
      <Property name="Text">&amp;Disconnect</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonDisconnect_Click</Event>
    </Object>
  </Object>
  <Object type="SAPIENTypes.FolderBrowserModernDialog, PowerShell Studio, Version=5.4.138.0, Culture=neutral, PublicKeyToken=null" name="folderbrowsermoderndialog1">
    <Property name="SelectedPath">$env:HOMEPATH</Property>
    <Property name="Title">OVA Save Location</Property>
  </Object>
  <Code><![CDATA[
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}


$formVCenterManager_Load={
	#TODO: Initialize Form Controls here
	$buttonASPPowerOff.Enabled = $false
	$buttonASPPowerOn.Enabled = $false
	$nl = [Environment]::newline
	$textbox1.Text = "vCenter Manager v1.3 $nl Christian Crill $nl Engility $nl Advanced tools are in beta, use with caution $nl Select your VMs then select which task to complete."
	# Gather all Non template VMs
	$VMs = Get-VM | where { $_.name -like "*_UNCLASS_*" -or $_.name -like "*_SECRET_*" -and $_.name -notlike "*_TMPL*" } | Select-Object Name | Sort-Object
	Update-ListBox $checkedlistbox1 -Items $VMs.name -DisplayMember Name
	# Gather template VMs
	$TemplateVMs = Get-VM | where { $_.name -like "*_TMPL*" } | Select-Object Name | Sort-Object
	Update-ListBox $checkedlistbox2 -Items $TemplateVMs.name -DisplayMember Name
	$CitrixVMs = Get-VM | Where { $_.name -notlike "*_UNCLASS_*" -and $_.name -notlike "*_SECRET_*" -and $_.name -notlike "NTNX-*" } | Select-Object Name | Sort-Object
	Update-ListBox $checkedlistbox3 -Items $CitrixVMs.name -DisplayMember Name
	}

$buttonDisconnect_Click={
	#TODO: Place custom script here
	Disconnect-VIServer -Confirm:$false -Force
}


$buttonASPPowerOff_Click={
	#TODO: Place custom script here
	
	#####
	# Remove the messages
	# Capture the errors in a cleaner way, stop all the pop ups!
	# Update the wait-vm function and its waiting for non-tools VM loop
	# Errors out at shutting down VC
	######
	# SETUP
	$nl = [Environment]::newline
	$continue = $false
	$error.clear()
	
	
	Set-PowerCLIConfiguration -DefaultVIServerMode Multiple
	###############
	# Enable HA and DRS
	###############
	Get-Cluster | Set-Cluster -HAEnabled:$false -DrsEnabled:$false -Confirm:$false
	
	###############
	#Gather all ESX hosts
	###############
	$esxhosts = get-vmhost
	
	###############
	# Build arrays
	###############
	$Secondary_vms = get-vm | Where { $_.name -notlike "*_VC01*" -and $_.name -notlike "*_DC01*" -and $_.name -notlike "*_DC02*" -and $_.name -notlike "*_AUTH*" -and $_.name -notlike "*_MOSS*" -and $_.name -notlike "*_SQL01*" -and $_.name -notlike "*_SQL02*" -and $_.name -notlike "*_FSVR*" -and $_.name -notlike "*_LIC01*" -and $_.name -notlike "*_MAIL*" -and $_.name -notlike "*NTNX*" }
	$Primary_vms = get-vm | Where { $_.name -like "*_VC01*" -or $_.name -like "*_DC01*" -or $_.name -like "*_DC02*" -or $_.name -like "*_AUTH*" -or $_.name -like "*_MOSS*" -or $_.name -like "*_SQL01*" -or $_.name -like "*_SQL02*" -or $_.name -like "*_FSVR*" -or $_.name -like "*_LIC01*" -or $_.name -like "*_MAIL*" }
	$nl
	$nl
	
	###############
	# Shutdown all VMs except DC01/DC02/AUTH/MOSS/SQL01/SQL02/VC01/FSVR/LIC01/MAIL/NTNX-XXX-X-CVMs 
	###############
	$Targets = @()
	$Targets += $Secondary_vms
	Foreach ($VM in ($Secondary_vms))
	{
		IF ($VM.PowerState -eq "PoweredOn")
		{
			Shutdown-VMGuest -VM $VM -confirm:$false
		}
	}
	# Wait for completion
	Wait-VMOffline $Targets
	
	
	###############
	#Shutdown Lic01 and Mail
	###############
	$Targets = @()
	$Targets += ($Primary_vms | Where { $_.name -like "*_LIC01*" })
	$Targets += ($Primary_vms | Where { $_.name -like "*_MAIL*" })
	Foreach ($Target in $Targets)
	{
		Shutdown-VMGuest -VM $Target.name -confirm:$false
	}
	# Wait for completion
	Wait-VMOffline $Targets
	
	###############
	# Connect to all ESX Hosts
	###############
	Foreach ($esxhost in ($esxhosts | select name))
	{
		
		Do
		{
			$ErrorActionPreference = "Stop"
			$GetCred = $host.ui.PromptForCredential("ESXi $($esxhost.name)", "Please enter ESXi credentials for: $($esxhost.name)", "root", "")
			
			Try
			{
				Connect-VIServer -Credential $GetCred -server "$($esxhost.name)"
				$continue = $true
			}
			Catch
			{
			}
		}
		Until ($continue -eq $true)
		$continue = $false
		$ErrorActionPreference = "Continue"
	}
	
	###############
	#Shutdown VC01 
	###############
	$Targets = @()
	$Targets += ($Primary_vms | Where { $_.name -like "*_VC01*" })
	Foreach ($Target in $Targets)
	{
		Shutdown-VMGuest -VM $Target.name -confirm:$false
	}
	Wait-VMOffline $Targets
	
	###############
	# Build arrays
	###############
	$Secondary_vms = get-vm | Where { $_.name -notlike "*_VC01*" -and $_.name -notlike "*_DC01*" -and $_.name -notlike "*_DC02*" -and $_.name -notlike "*_AUTH*" -and $_.name -notlike "*_MOSS*" -and $_.name -notlike "*_SQL01*" -and $_.name -notlike "*_SQL02*" -and $_.name -notlike "*_FSVR*" -and $_.name -notlike "*_LIC01*" -and $_.name -notlike "*_MAIL*" -and $_.name -notlike "*NTNX*" }
	$Primary_vms = get-vm | Where { $_.name -like "*_VC01*" -or $_.name -like "*_DC01*" -or $_.name -like "*_DC02*" -or $_.name -like "*_AUTH*" -or $_.name -like "*_MOSS*" -or $_.name -like "*_SQL01*" -or $_.name -like "*_SQL02*" -or $_.name -like "*_FSVR*" -or $_.name -like "*_LIC01*" -or $_.name -like "*_MAIL*" }
	$nl
	$nl
	
	###############
	# Post-VC Shutdown array
	###############
	$Secondary_vms = get-vm | Where { $_.name -notlike "*_VC01*" -and $_.name -notlike "*_DC01*" -and $_.name -notlike "*_DC02*" -and $_.name -notlike "*_AUTH*" -and $_.name -notlike "*_MOSS*" -and $_.name -notlike "*_SQL01*" -and $_.name -notlike "*_SQL02*" -and $_.name -notlike "*_FSVR*" -and $_.name -notlike "*_LIC01*" -and $_.name -notlike "*_MAIL*" -and $_.name -notlike "*NTNX*" }
	$Primary_vms = get-vm | Where { $_.name -like "*_VC01*" -or $_.name -like "*_DC01*" -or $_.name -like "*_DC02*" -or $_.name -like "*_AUTH*" -or $_.name -like "*_MOSS*" -or $_.name -like "*_SQL01*" -or $_.name -like "*_SQL02*" -or $_.name -like "*_FSVR*" -or $_.name -like "*_LIC01*" -or $_.name -like "*_MAIL*" }
	
	
	###############
	# Shutdown SQL02 MOSS FSVR 
	###############
	$Targets = @()
	$Targets += ($Primary_vms | Where { $_.name -like "*_SQL02*" })
	$Targets += ($Primary_vms | Where { $_.name -like "*_MOSS*" })
	$Targets += ($Primary_vms | Where { $_.name -like "*_FSVR*" })
	Foreach ($Target in $Targets)
	{
		Shutdown-VMGuest -VM $Target.name -confirm:$false
	}
	# Wait for completion
	Wait-VMOffline $Targets
	
	###############
	#Shutdown SQL01 DC01 DC02 Auth
	###############
	$Targets = @()
	$Targets += ($Primary_vms | Where { $_.name -like "*_SQL01*" })
	$Targets += ($Primary_vms | Where { $_.name -like "*_DC01*" })
	$Targets += ($Primary_vms | Where { $_.name -like "*_DC02*" })
	$Targets += ($Primary_vms | Where { $_.name -like "*_AUTH*" }) #Needs VMTools or manual shutdown
	Foreach ($Target in $Targets)
	{
		Shutdown-VMGuest -VM $Target.name -confirm:$false
	}
	# Wait for completion
	Wait-VMOffline $Targets
	
	###############
	# Build CVM Array
	###############
	$CVMs = get-vm | Where { $_.name -like "*NTNX*" }
	
	###############
	# Confirm only the CVMs are running
	###############
	$OnlineVMs = Get-VM | Where { $_.PowerState -eq "PoweredOn" }
	Foreach ($OnlineVM in $OnlineVMs)
	{
		IF ($OnlineVM.name -notlike "*NTNX*")
		{
			Stop-VM -VM $OnlineVM.name -confirm:$false
		}
		ELSE
		{
		}
	}
	
	###############
	# Shutdown all CVMs 
	###############
	$Targets = @()
	$Targets += $CVMS
	Foreach ($Target in $Targets)
	{
		Shutdown-VMGuest -VM $Target.name -confirm:$false
	}
	
	# Wait for completion
	Wait-VMOffline $Targets
	
	###############
	#Place ESXi hosts into maintenance mode
	###############
	Foreach ($esxhost in ($esxhosts | select name))
	{
		Set-VMHost -VMHost $esxhost.name -State Maintenance -confirm:$false
	}
	
	###############
	#Power off ESXi hosts
	###############
	Foreach ($esxhost in ($esxhosts | select name))
	{
		Stop-VMHost -VMHost $esxhost.name -Force -confirm:$false
	}
	
	###############
	#Wait for Power off ESXi hosts
	###############
	Do
	{
		$i = 0
		Foreach ($esxhost in $esxhosts)
		{
			$ping = Test-Connection -Computername $esxhost.name -count 1 -quiet
			IF ($ping -eq $true)
			{
				$i++
			}
		}
	}
	Until ($i -eq ($esxhosts.count))
	
	###############
	#Disconnect from hosts
	###############
	Disconnect-VIServer * -Confirm:$False
	
}

$buttonASPPowerOn_Click={
	#TODO: Place custom script here
	Set-PowerCLIConfiguration -DefaultVIServerMode Multiple
	# SETUP
	$nl = [Environment]::newline
	$continue = $false
	$error.clear()
	$timer = New-Object system.diagnostics.stopwatch
	$timer.reset()
	
	$IPMIRange = 23 .. 34
	$IPOctet = Read-Host "Enter your first 3 octets, examble 10.10.58"
	$IPMIArray = @()
	Foreach ($obj in $IPMIRange)
	{
		$RemoteObj = $IPOctet + "." + $obj
		$IPMIArray += $RemoteObj
	}
	$Creds = $host.ui.PromptForCredential("IPMI", "Please enter IPMI credentials.", "ADMIN", "")
	
	Try
	{
		Foreach ($obj in $IPMIArray)
		{
			Get-PcsvDevice -TargetAddress $obj -ManagementProtocol IPMI -Credential $Creds | Start-PcsvDevice
		}
	}
	Catch
	{
		
	}
	
	
	
	
	
	###############
	# Gather targetting information
	###############
	$array = @()
	$IP = Read-Host "Enter your first 3 octets, do not add the last .  "
	
	
	$NumberGen = 11 .. 22
	Foreach ($num in $NumberGen)
	{
		$array += "$IP.$num"
	}
	
	$Subarray = @()
	Foreach ($item in $array)
	{
		$TargetObj = New-Object PSObject
		$pings = Test-Connection $item -Quiet -Count 1
		$TargetObj | Add-Member -MemberType NoteProperty -Name ESXi -Value $item
		$TargetObj | Add-Member -MemberType NoteProperty -Name Ping -Value $pings
		$subarray += $TargetObj
	}
	
	###############
	#Connect to all ESX hosts
	###############
	Foreach ($target in ($subarray | Where { $_.Ping -eq "True" }) | Select ESXi)
	{
		
		Do
		{
			$ErrorActionPreference = "Stop"
			$GetCred = $host.ui.PromptForCredential("ESXi $($target.esxi)", "Please enter ESXi credentials for: $($target.esxi)", "root", "")
			
			Try
			{
				Connect-VIServer -Credential $GetCred -server "$($target.esxi)"
				$continue = $true
			}
			Catch
			{
				$error.clear()
			}
		}
		Until ($continue -eq $true)
		$continue = $false
		$ErrorActionPreference = "Continue"
	}
	
	###############
	# Exit Maintenance Mode on ESX hosts
	###############
	$esxhosts = get-vmhost
	Foreach ($esxhost in ($esxhosts | select name))
	{
		Set-VMHost -VMHost $esxhost.name -state Connected -confirm:$false
	}
	
	
	
	###############
	# Build arrays
	###############
	$Secondary_vms = get-vm | Where { $_.name -notlike "*_VC01*" -and $_.name -notlike "*_DC01*" -and $_.name -notlike "*_DC02*" -and $_.name -notlike "*_AUTH*" -and $_.name -notlike "*_MOSS*" -and $_.name -notlike "*_SQL01*" -and $_.name -notlike "*_SQL02*" -and $_.name -notlike "*_FSVR*" -and $_.name -notlike "*_LIC01*" -and $_.name -notlike "*_MAIL*" -and $_.name -notlike "*NTNX*" }
	$Primary_vms = get-vm | Where { $_.name -like "*_VC01*" -or $_.name -like "*_DC01*" -or $_.name -like "*_DC02*" -or $_.name -like "*_AUTH*" -or $_.name -like "*_MOSS*" -or $_.name -like "*_SQL01*" -or $_.name -like "*_SQL02*" -or $_.name -like "*_FSVR*" -or $_.name -like "*_LIC01*" -or $_.name -like "*_MAIL*" -or $_.name -like "*NTNX*" }
	
	###############
	# Start CVMs
	###############
	$Targets = @()
	$Targets += ($Primary_vms | Where { $_.name -like "*NTNX*" })
	Foreach ($Target in $Targets)
	{
		Start-VMQuestions $Target.name
	}
	
	# Wait for completion
	$timer.start()
	Do
	{
		start-sleep -seconds 30
	}
	Until ($timer.elapsed.minutes -ge 9)
	$timer.stop()
	$timer.reset()
	
	
	###############
	# Build arrays - Post CVM boot
	###############
	$Secondary_vms = get-vm | Where { $_.name -notlike "*_VC01*" -and $_.name -notlike "*_DC01*" -and $_.name -notlike "*_DC02*" -and $_.name -notlike "*_AUTH*" -and $_.name -notlike "*_MOSS*" -and $_.name -notlike "*_SQL01*" -and $_.name -notlike "*_SQL02*" -and $_.name -notlike "*_FSVR*" -and $_.name -notlike "*_LIC01*" -and $_.name -notlike "*_MAIL*" -and $_.name -notlike "*NTNX*" }
	$Primary_vms = get-vm | Where { $_.name -like "*_VC01*" -or $_.name -like "*_DC01*" -or $_.name -like "*_DC02*" -or $_.name -like "*_AUTH*" -or $_.name -like "*_MOSS*" -or $_.name -like "*_SQL01*" -or $_.name -like "*_SQL02*" -or $_.name -like "*_FSVR*" -or $_.name -like "*_LIC01*" -or $_.name -like "*_MAIL*" }
	
	
	
	###############
	# Start DC01 DC02 AUTH
	###############
	$Targets = @()
	$Targets += ($Primary_vms | Where { $_.name -like "*_DC01*" -or $_.name -like "*_DC02*" -or $_.name -like "*_AUTH*" })
	Foreach ($Target in $Targets)
	{
		Start-VMQuestions $Target.name
	}
	
	# Wait for completion
	$timer.start()
	Do
	{
		start-sleep -seconds 30
	}
	Until ($timer.elapsed.minutes -ge 9)
	$timer.stop()
	$timer.reset()
	
	###############
	# Start MOSS
	###############
	$Targets = @()
	$Targets += ($Primary_vms | Where { $_.name -like "*_MOSS*" })
	Foreach ($Target in $Targets)
	{
		Start-VMQuestions $Target.name
	}
	
	# Wait for completion
	$timer.start()
	Do
	{
		start-sleep -seconds 30
	}
	Until ($timer.elapsed.minutes -ge 5)
	$timer.stop()
	$timer.reset()
	
	###############
	# Start SQL01 SQL02 FSVR
	###############
	$Targets = @()
	$Targets += ($Primary_vms | Where { $_.name -like "*_SQL01*" -or $_.name -like "*_SQL02*" -or $_.name -like "*_FSVR*" })
	Foreach ($Target in $Targets)
	{
		Start-VMQuestions $Target.name
	}
	
	# Wait for completion
	$timer.start()
	Do
	{
		start-sleep -seconds 30
	}
	Until ($timer.elapsed.minutes -ge 5)
	$timer.stop()
	$timer.reset()
	
	###############
	# Start VC01
	###############
	$Targets = @()
	$Targets += ($Primary_vms | Where { $_.name -like "*_VC01*" })
	Foreach ($Target in $Targets)
	{
		Start-VMQuestions $Target.name
	}
	
	# Wait for completion
	$timer.start()
	Do
	{
		start-sleep -seconds 30
	}
	Until ($timer.elapsed.minutes -ge 9)
	$timer.stop()
	$timer.reset()
	
	###############
	# Disconnect from ESXHosts ... Connect to vCenter 
	###############
	Disconnect-VIServer * -Confirm:$false
	
	Do
	{
		$vCenter = Read-Host "Enter the vCenter IP: "
		$ErrorActionPreference = "Stop"
		$GetCred = $host.ui.PromptForCredential("vCenter Credentials", "Please enter vCenter credentials", "", "NetBiosUserName")
		
		Try
		{
			Connect-VIServer -credential $GetCred -server "$vCenter"
			$continue = $true
		}
		Catch
		{
			$error.clear()
		}
	}
	Until ($continue -eq $true)
	$continue = $false
	$ErrorActionPreference = "Continue"
	
	###############
	# Build arrays - Post vCenter Startup
	###############
	$Secondary_vms = get-vm | Where { $_.name -notlike "*_VC01*" -and $_.name -notlike "*_DC01*" -and $_.name -notlike "*_DC02*" -and $_.name -notlike "*_AUTH*" -and $_.name -notlike "*_MOSS*" -and $_.name -notlike "*_SQL01*" -and $_.name -notlike "*_SQL02*" -and $_.name -notlike "*_FSVR*" -and $_.name -notlike "*_LIC01*" -and $_.name -notlike "*_MAIL*" -and $_.name -notlike "*NTNX*" }
	$Primary_vms = get-vm | Where { $_.name -like "*_VC01*" -or $_.name -like "*_DC01*" -or $_.name -like "*_DC02*" -or $_.name -like "*_AUTH*" -or $_.name -like "*_MOSS*" -or $_.name -like "*_SQL01*" -or $_.name -like "*_SQL02*" -or $_.name -like "*_FSVR*" -or $_.name -like "*_LIC01*" -or $_.name -like "*_MAIL*" }
	$CVMs = get-vm | Where { $_.name -like "*NTNX*" }
	
	###############
	# Start LIC01 MAIL
	###############
	$Targets = @()
	$Targets += ($Primary_vms | Where { $_.name -like "*_LIC01*" -or $_.name -like "*_MAIL*" })
	Foreach ($Target in $Targets)
	{
		Start-VMQuestions $Target.name
	}
	
	# Wait for completion
	$timer.start()
	Do
	{
		start-sleep -seconds 30
	}
	Until ($timer.elapsed.minutes -ge 5)
	$timer.stop()
	$timer.reset()
	
	###############
	# Start all VMs except DC01/DC02/AUTH/MOSS/SQL01/SQL02/VC01/FSVR/LIC01/MAIL/NTNX-XXX-X-CVMs 
	###############
	$Targets = @()
	$Targets += $Secondary_vms
	Foreach ($Target in $Targets)
	{
		Start-VMQuestions $Target.name
	}
	
	# Wait for completion
	$timer.start()
	Do
	{
		start-sleep -seconds 30
	}
	Until ($timer.elapsed.minutes -ge 5)
	$timer.stop()
	$timer.reset()
	
	###############
	# Enable HA and DRS
	###############
	Get-Cluster | Set-Cluster -HAEnabled:$true -DrsEnabled:$true -Confirm:$false
	
	
}

$buttonUnselectAll_Click={
	#TODO: Place custom script here
	$i = 0
	$count = $checkedlistbox1.Items.Count
	Do { $checkedlistbox1.SetItemChecked($i, $false); $i++ }
	Until ($i -eq ($count))
	
}

$buttonSelectAll_Click={
	#TODO: Place custom script here
	$i = 0
	$count = $checkedlistbox1.Items.Count
	Do { $checkedlistbox1.SetItemChecked($i, $true); $i++ }
	Until ($i -eq ($count))
	
}

$buttonCreateNewSnapshot_Click={
	#TODO: Place custom script here	$Name = Read-Host "Enter snapshot name."
	$script:targets = @()
	$script:targets += $checkedlistbox2.CheckedItems
	$script:targets += $checkedlistbox1.CheckedItems
	$script:targets += $checkedlistbox3.CheckedItems
	
	$Name = Read-Host "Enter Name for snapshot"
	$Description = Read-Host "Enter detailed description."
	
	IF ($Name.Length -gt 0 -and $Description.Length -gt 0)
	{
		$Jobscript =
		{
			Connect-VIServer -Server $args[1] -User $args[2] -Password $args[3]
			foreach ($obj in $args[0])
			{
				While ((Get-Task -Status Running | Where { $_.name -eq "CreateSnapshot_Task" }).count -gt 5)
				{
					Start-Sleep -Seconds 1
				}
				New-Snapshot -vm $obj -name $args[4] -Description $args[5] -RunAsync -Confirm:$false
			}
			Disconnect-VIServer -Server $args[1] -Force -Confirm:$false
		}
		#Start-Job -Name CreateNewSnapshots -InitializationScript {Add-PSSnapin VMware.VIMAutomation.Core} -ScriptBlock $jobscript -ArgumentList $script:targets,$script:vcIP,$script:user,$script:pass,$Name,$Description
		foreach ($obj in $script:targets)
		{
			While ((Get-Task -Status Running | Where { $_.name -eq "CreateSnapshot_Task" }).count -gt 5)
			{
				Start-Sleep -Seconds 30
			}
			New-Snapshot -vm $obj -name $Name -Description $Description -RunAsync -Confirm:$false
		}
	}
	ELSE
	{
		msg Console "Please enter the required fields"
	}
	
}


$buttonDeleteAllSnapshots_Click= {
	#TODO: Place custom script here
	$script:targets = @()
	$script:targets += $checkedlistbox2.CheckedItems
	$script:targets += $checkedlistbox1.CheckedItems
	$script:targets += $checkedlistbox3.CheckedItems
	
	$Jobscript =
	{
		Connect-VIServer -Server $args[1] -User $args[2] -Password $args[3]
		
		Foreach ($obj in $args[0])
		{
			while ((Get-task -Status Running | Where { $_.name -eq "RemoveSnapshot_Task" }).count -gt 10)
			{
				Start-Sleep -Seconds 30
			}
			Get-Snapshot -VM $obj | Remove-Snapshot -Confirm:$false -RunAsync | Out-Null
		}
		Disconnect-VIServer -Server $args[1] -Force -Confirm:$false
	}
	#Start-Job -Name DeleteAllSnapshots -InitializationScript { Add-PSSnapin VMware.VIMAutomation.Core } -ScriptBlock $jobscript -ArgumentList $script:targets, $script:vcIP, $script:user, $script:pass
	foreach ($obj in $script:targets)
	{
		while ((Get-task -Status Running | Where { $_.name -eq "RemoveSnapshot_Task" }).count -gt 10)
		{
			Start-Sleep -Seconds 30
		}
		Get-Snapshot -VM $obj | Remove-Snapshot -Confirm:$false -RunAsync | Out-Null
	}
}

$buttonDeleteAllButCurrentS_Click={
	#TODO: Place custom script here
	$script:targets = @()
	$script:targets += $checkedlistbox2.CheckedItems
	$script:targets += $checkedlistbox1.CheckedItems
	$script:targets += $checkedlistbox3.CheckedItems
	
	$Jobscript =
	{
		Connect-VIServer -Server $args[1] -User $args[2] -Password $args[3]
		
		Foreach ($obj in $args[0])
		{
			while ((Get-task -Status Running | Where { $_.name -eq "RemoveSnapshot_Task" }).count -gt 10)
			{
				Start-Sleep -Seconds 30
			}
			Get-Snapshot -VM $obj | where { $_.isCurrent -eq $false } | Remove-Snapshot -Confirm:$false -RunAsync | Out-Null
		}
		Disconnect-VIServer -Server $args[1] -Force -Confirm:$false
	}
	#Start-Job -Name DeleteAllButCurrent -InitializationScript { Add-PSSnapin VMware.VIMAutomation.Core } -ScriptBlock $jobscript -ArgumentList $script:targets, $script:vcIP, $script:user, $script:pass
	foreach ($obj in $script:targets)
	{
		while ((Get-task -Status Running | Where { $_.name -eq "RemoveSnapshot_Task" }).count -gt 10)
		{
			Start-Sleep -Seconds 30
		}
		Get-Snapshot -VM $obj | where { $_.isCurrent -eq $false } | Remove-Snapshot -Confirm:$false -RunAsync | Out-Null
	}
	
}

$buttonDeleteAllButLast3Sna_Click={
	#TODO: Place custom script here
	$script:targets = @()
	$script:targets += $checkedlistbox2.CheckedItems
	$script:targets += $checkedlistbox1.CheckedItems
	$script:targets += $checkedlistbox3.CheckedItems
	
	$Jobscript =
	{
		Connect-VIServer -Server $args[1] -User $args[2] -Password $args[3]
		
		Foreach ($obj in $args[0])
		{
			while ((Get-task -Status Running | Where { $_.name -eq "RemoveSnapshot_Task" }).count -gt 10)
			{
				Start-Sleep -Seconds 30
			}
			
		$count = (Get-Snapshot -VM $obj).count
		$i = 0
		if ($count -gt 3)
		{
			Do { (Get-Snapshot -VM $obj)[$i] | Remove-Snapshot -Confirm:$false -RunAsync | Out-Null; $i++ }
			Until ($i -eq ($count - 3))
		}
			
		}
		Disconnect-VIServer -Server $args[1] -Force -Confirm:$false
	}
	#Start-Job -Name DeleteAllBut3 -InitializationScript { Add-PSSnapin VMware.VIMAutomation.Core } -ScriptBlock $jobscript -ArgumentList $script:targets, $script:vcIP, $script:user, $script:pass
	foreach ($obj in $script:targets)
	{
		while ((Get-task -Status Running | Where { $_.name -eq "RemoveSnapshot_Task" }).count -gt 10)
		{
			Start-Sleep -Seconds 30
		}
		$count = (Get-Snapshot -VM $obj).count
		$i = 0
		if ($count -gt 3)
		{
			Do { (Get-Snapshot -VM $obj)[$i] | Remove-Snapshot -Confirm:$false -RunAsync | Out-Null; $i++ }
			Until ($i -eq ($count - 3))
		}
	}
	
}

$button2TemplateSlctAll_Click={
	#TODO: Place custom script here
	$i = 0
	$count = $checkedlistbox2.Items.Count
	Do { $checkedlistbox2.SetItemChecked($i, $true); $i++ }
	Until ($i -eq ($count))
	
}

$button1TemplateUnslctAll_Click={
	#TODO: Place custom script here
	$i = 0
	$count = $checkedlistbox2.Items.Count
	Do { $checkedlistbox2.SetItemChecked($i, $false); $i++ }
	Until ($i -eq ($count))
	
}

$button2CitrixSelect_Click={
	#TODO: Place custom script here
	$i = 0
	$count = $checkedlistbox3.Items.Count
	Do { $checkedlistbox3.SetItemChecked($i, $true); $i++ }
	Until ($i -eq ($count))
	
	
}

$button1CitrixUnSelect_Click={
	#TODO: Place custom script here
	$i = 0
	$count = $checkedlistbox3.Items.Count
	Do { $checkedlistbox3.SetItemChecked($i, $false); $i++ }
	Until ($i -eq ($count))
	
}



$checkboxUnlockAdvancedTools_CheckStateChanged={
	#TODO: Place custom script here
	IF ($buttonASPPowerOff.Enabled -eq $false)
	{
		$buttonASPPowerOff.Enabled = $true
		$buttonASPPowerOn.Enabled = $true
	}
	Else
	{
		$buttonASPPowerOff.Enabled = $false
		$buttonASPPowerOn.Enabled = $false
	}

	
}

$buttonShutdownVM_Click={
	#TODO: Place custom script here
	$script:targets = @()
	$script:targets += $checkedlistbox2.CheckedItems
	$script:targets += $checkedlistbox1.CheckedItems
	$script:targets += $checkedlistbox3.CheckedItems
	
	Foreach ($VM in $script:targets)
	{
		Shutdown-VMGuest -VM $VM -confirm:$false
	
	}
	# Wait for completion
	Wait-VMOffline $script:targets
}

$buttonPowerOnVM_Click={
	#TODO: Place custom script here
	$script:targets = @()
	$script:targets += $checkedlistbox2.CheckedItems
	$script:targets += $checkedlistbox1.CheckedItems
	$script:targets += $checkedlistbox3.CheckedItems
	
	Foreach ($Target in $script:targets)
	{
		Start-VMQuestions $Target
	}
	
}

$buttonCreateOVA_Click={
	#TODO: Place custom script here
	$script:targets = @()
	$script:targets += $checkedlistbox2.CheckedItems
	$script:targets += $checkedlistbox1.CheckedItems
	$script:targets += $checkedlistbox3.CheckedItems
	
	IF ($script:targets | where { $_.PowerState -eq "PoweredOn" })
	{
		Write-Warning "WARNING: ALL VMs BEING EXPORTED MUST BE POWERED OFF BEFORE CONTINUING"
		return
		
	}
	
	$folderbrowsermoderndialog1.ShowDialog()
	$Savepath = $folderbrowsermoderndialog1.SelectedPath

	Foreach ($vm in $script:targets)
	{
		Export-vapp -destination $Savepath -VM $vm -Format Ova -Confirm:$false
		
	}
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
  </Assemblies>
</File>