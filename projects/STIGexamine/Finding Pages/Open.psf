<File version="2.1">
  <FileID>e5c05334-2cc8-467b-aeab-aa21549ddd24</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAABtPSURBVHhe7d1Xc97nnd9hv4A47yFnOc8L8Gwm
mWRnfZJkkzizu+Ndz65cdmMVay3blGR7KVm92FY1rU5VirLYwQ4CICpRiV6JDrATlK2oWL/c958E
RVGQRMkLUtJ9fWauQXsKAB3c3+cBCH1FkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
X+Zu/+pX/03Nt7/93Zp77nuw5o677gEAvmDuuuu+dI7fX/Nnf/a1mnS2Zx/fv/3qVxtuv/O+aO2f
ir7JU3H4yAkA4Aum98jJ6E3neG1zd/z5f/3zOH/Mf3TX/MM1Nfnwb+idjv3to7G/AwD4ItqXtI8d
j42baz55ANz/4C9rBmeXorZzLOq6xgGgaA09R+Lg4cloOHzksixftrp+98T596182ZXk69f3TMSB
dP388tPd97mX+X6XP/+mgbmob+355AFw99331QylAVDXlT7p/IlnPfnOl029L79/+TIA8CVS333u
QN3VNBBbD/TEtrrDlyVftuZgXxxMwyEfwNvre1e83EfJ19/bOhyNvVOxt234U913pf5wdb95uOSv
o3VwPmobOy5vAAzPna0O97w6quXRNRL17QPR0DEUde0jUdvaFwcODaf3j1+4zAXpE/7Q+1Z0uZcD
gCuvuX86HeT9sWFbU2zd3xmb93Vcli37OmPjjpbqMN60tyNe39WW3pc+ll7PL3ekQVDT0HdBfnv5
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
FMgAAIACGQAAUCADAAAKZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACmQAAECB
DAAAKJABAAAFMgAAoEAGAAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIAAKBABgAAFMgA
AIACGQAAUCADAAAKZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACmQAAECBDAAA
KJABAAAFMgAAoEAGAAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIAAKBABgAAFMgAAIAC
GQAAUCADAAAKZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACmQAAECBDAAAKJAB
AAAFMgAAoEAGAAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIAAKBABgAAFMgAAIACGQAA
UCADAAAKZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACmQAAECBDAAAKJABAAAF
MgAAoEAGAAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIAAKBABgAAFMgAAIACGQAAUCAD
AAAKZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACmQAAECBDAAAKJABAAAFMgAA
oEAGAAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIAAKBABgAAFMgAAIACGQAAUCADAAAK
ZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACmQAAECBDAAAKJABAAAFMgAAoEAG
AAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIAAKBABgAAFMgAAIACGQAAUCADAAAKZAAA
QIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACmQAAECBDAAAKJABAAAFMgAAoEAGAAAU
yAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIAAKBABgAAFMgAAIACGQAAUCADAAAKZAAAQIEM
AAAokAEAAAUyAACgQFd0ALz33ntxyy23xAMPPFDd+UsvvQQAXAWbNm2K73znO1FfXx9vv/326g6A
d955p3r0n+/w+uuvj+uuuw4AuApuuOGG+OY3vxn9/f3x5ptvru4AyN54443q5cmTJwGAq2hpaaly
8Tm9agPgzJkzcfbs2asuf8H5cwGAq2Gls+lKu/Twz1ZtAGQLCwsxNzcX8/PzV82JEyeq/wCXfm4A
cCUcPXr0qp6F+b6PHz/+obNwVQZAXhr5DhsaGqKzszM6OjquuHy/TU1N0dfXF7///e8/8EUDwGrL
B24+ePNv3690Tl0J+SxsbW2tXl/+0fyyVRsA09PT0dXVVa2PmZmZj5QvNze/WF3/2OJC9fZKl/u0
ZmdnY3h4uBoAl37RALDa8gDIj/7z4ZsfFK90Vl0qn4GzcwvpXD33aP3owvyfdC7ms/DIkSPVeZx/
FHDx57dqAyDfcV4e+eXk5ORHyl/oyOGWWLduXext7I7FNALy+6empir5+tXr+RuQLH/s4ttYSb7M
4OCgAQDAVbE8ANrb26tDfKWz6lLT0zMxPtgVLz3zVDzxxBOxv7k7jYf5mKo+PpUO9I8/Uy+Vz8Kx
sbHP3wCYSl/o3Fhv/Grt2vj1M8/EPXfcH3Vdo7Ewm79R+QudjoF0gE/OpAUzPhL9Q8PVmpk4MpYW
zcq3ucwAAOBq+iwDYH7xaBzc+lz884/vjl17aqK2qSOOHT8ZA90t8cTDv44nX96ZLnPugfLl+NwO
gNn5xWjdvSHuffjl+GNENG15Lr77vVuioaMrtrz6Svz2oQfi7/76r+LmtXfH2p/8MK75/prYXrMj
Hn/sqRifWzy/iFZmAABwNX3WAdC84/n4x+/dFM8880I88vD9cd/9t8W9d94R//BX34i/v+n+mD56
LKanVr7+pT63A2BmbiF6G7fH3fc9EUMDbfHTH9wQ1/zTzbG/sTM2PPlA/M+/+B/xo9vujpuv+6f4
0Z3PRt3Ol+Jbf/+deH77wTh2dH7F21xmAABwNX3WAdCwdX3cetujcai7P4YObYn//LX/FI88+3z8
4B+vj6dfr4vjJxZXvO5KPrcDID/Nf3R+OjY9/Whcf8N18Xd/e208+pun4mc/uj7+75pfxPPrn4rb
b/55PPrw4/H4c1tirL8+vv23341DEwsxN/3xvwdgAABwNX2WATC3sBgd+1+La793Q9z34APx45tv
iSeeXhe33bIm1v789li79tEYmpuPmS/CMwD5Z/YrfVLZzMx0jI1PxL333BHX5z9XeOMP45FHH06f
7HAMjozHwsJc9B8+HGOT03F8cS5+99zD8dj6mlg89vFP/2cGAABX08UD4OMfDF8knV356f3B/t7o
T+fX1po9cfsvfhE/v/XWGBoejvHR0ZhIl8tn3IrXv8RVGQB57bS1tVX//CDf+UcZTV9MX39/DAwM
xGAyNDRUXWdiYiJ9fDwm0uvj4+PJWPXP+iYm09sr3M6l8nUOp/GQGQAAXGnLA6ClpeX8mbbyefVh
586+c+dnOiPTEOhP52M+1z7d7Zw7C/O5mkfIFRkAF6+evDo+SXd39wesdJlK/vhK7/8IeYDkb8Cl
XzQArLZ8Fua/w5/Po/yM+KVn1OX6xLPxE+SzOD8jfkUGQJa/8Hxn+dmAq2X5/i/+vADgSvo8nIWX
Hv7Zqg0AAODzywAAgAIZAABQoH+VAXAm3cjZJN8YAPD598bS6Zg//icMgKE0AGbTgphP8pIAAD7/
8uF/ZOFM9H+WATCQBsDAzFK1HgCAL5Z8+Odz/LIHwL33PrDz9LuRrvBudSUA4Itr7vcRhw6PfPIA
+NFP1tQdHpxIa6GvWgwAwBdXPvy31uz95AEgSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZKkL2Zf+cr/B5EzzzmwFwDaAAAAAElFTkSuQmCC</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="formMain" children="Controls">
    <Property name="AutoScaleDimensions">6, 13</Property>
    <Property name="AutoScaleMode">Font</Property>
    <Property name="ClientSize">1081, 610</Property>
    <Property name="Name">formMain</Property>
    <Property name="StartPosition">CenterScreen</Property>
    <Property name="Text">Grid Search</Property>
    <Event name="Load">formMain_Load</Event>
    <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="textboxSearch" children="Controls">
      <Property name="Anchor">Top, Left, Right</Property>
      <Property name="Location">13, 15</Property>
      <Property name="Name">textboxSearch</Property>
      <Property name="Size">974, 20</Property>
      <Property name="TabIndex">0</Property>
      <Event name="KeyDown">textboxSearch_KeyDown</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonSearch" children="Controls">
      <Property name="Anchor">Top, Right</Property>
      <Property name="Location">993, 13</Property>
      <Property name="Name">buttonSearch</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">1</Property>
      <Property name="Text">&amp;Search</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonSearch_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="datagridviewResults" children="Controls">
      <Property name="AllowUserToAddRows">False</Property>
      <Property name="AllowUserToDeleteRows">False</Property>
      <Property name="Anchor">Top, Bottom, Left, Right</Property>
      <Property name="Location">12, 42</Property>
      <Property name="Name">datagridviewResults</Property>
      <Property name="ReadOnly">True</Property>
      <Property name="Size">1057, 527</Property>
      <Property name="TabIndex">2</Property>
      <Event name="ColumnHeaderMouseClick">datagridviewResults_ColumnHeaderMouseClick</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonExit" children="Controls">
      <Property name="Anchor">Bottom, Right</Property>
      <Property name="Location">994, 575</Property>
      <Property name="Name">buttonExit</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">4</Property>
      <Property name="Text">E&amp;xit</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonExit_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonQuery" children="Controls">
      <Property name="Anchor">Bottom, Left</Property>
      <Property name="Location">12, 575</Property>
      <Property name="Name">buttonQuery</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">3</Property>
      <Property name="Text">&amp;Query</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonQuery_Click</Event>
    </Object>
  </Object>
  <Code><![CDATA[

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Item,
			[Parameter(Mandatory = $false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
			-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param (
			[ValidateNotNull()]
			$InputObject,
			[ValidateNotNull()]
			[System.Data.DataTable]$Table,
			[switch]$RetainColumns,
			[switch]$FilterWMIProperties)
	
	if ($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @( ,$Table)
}
#endregion

#region Search Function
function SearchGrid()
{
	$RowIndex = 0
	$ColumnIndex = 0
	$seachString = $textboxSearch.Text
	
	if($seachString -eq "")
	{
		return
	}
	
	if($datagridviewResults.SelectedCells.Count -ne 0)
	{
		$startCell = $datagridviewResults.SelectedCells[0];
		$RowIndex = $startCell.RowIndex
		$ColumnIndex = $startCell.ColumnIndex + 1
	}
	
	$columnCount = $datagridviewResults.ColumnCount
	$rowCount = $datagridviewResults.RowCount
	for(;$RowIndex -lt $rowCount; $RowIndex++)
	{
		$Row = $datagridviewResults.Rows[$RowIndex]
		
		for(;$ColumnIndex -lt $columnCount; $ColumnIndex++)
		{
			$cell = $Row.Cells[$ColumnIndex]
			
			if($null -ne $cell.Value -and $cell.Value.ToString().IndexOf($seachString, [StringComparison]::OrdinalIgnoreCase) -ne -1)
			{
				$datagridviewResults.CurrentCell = $cell
				return
			}
		}
		
		$ColumnIndex = 0
	}
	
	$datagridviewResults.CurrentCell = $null
	[void][System.Windows.Forms.MessageBox]::Show("The search has reached the end of the grid.","String not Found")
	
}
#endregion

$formMain_Load={
	Update-DataGridView -DataGridView $datagridviewResults -Item ($script:ChecklistArray | where { $_.Status -eq "Open" } | select Checklist,Vuln_num, Rule_ID, Severity, Status, Rule_Title, Group_Title, Comments, Finding_Details)
	
}

$buttonExit_Click={
	#TODO: Place custom script here
	$formMain.Close()
}

$buttonQuery_Click= {
	#TODO: Place custom script here
	#	---------------------------------
	#	Sample Code to Load Grid
	#	---------------------------------
	#	$processes = Get-WmiObject Win32_Process -Namespace 'Root\CIMV2'
	#	Update-DataGridView -DataGridView $datagridviewResults -Item $processes -AutoSizeColumns DisplayedCells
	#	---------------------------------
	#	Sample Code to Load Sortable Data
	#	---------------------------------
	# 	$processes = Get-WmiObject Win32_Process -Namespace 'Root\CIMV2'
	#	$table = ConvertTo-DataTable -InputObject $processes -FilterWMIProperties
	#	Update-DataGridView -DataGridView $datagridviewResults -Item $table -AutoSizeColumns DisplayedCells
}

$buttonSearch_Click={
	#TODO: Place custom script here
	SearchGrid
}

$datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	if($datagridviewResults.DataSource -is [System.Data.DataTable])
	{
		$column = $datagridviewResults.Columns[$_.ColumnIndex]
		$direction = [System.ComponentModel.ListSortDirection]::Ascending
		
		if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
		{
			$direction = [System.ComponentModel.ListSortDirection]::Descending
		}

		$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
	}
}

$textboxSearch_KeyDown=[System.Windows.Forms.KeyEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
	if($_.KeyCode -eq 'Enter' -and $buttonSearch.Enabled)
	{
		SearchGrid	
		$_.SuppressKeyPress = $true
	}
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
  </Assemblies>
</File>