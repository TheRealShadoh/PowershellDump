<File version="2.1">
  <FileID>65f0c3aa-0288-48ef-8661-825f36c6cc86</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAADK0SURBVHhe7Zx3d1VXmqd75jtM9z/zFebfWWvW
fIP5d3o6VVXb1dWurmRX2cbGAQw20cbknAwmmhwlQBISyiihnHOWACHdKAljv/N799VlMFa1cU2D
y3WeZ61n6d57ztl7n7332e977j3wVwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA8BfIyr/5m7/OeXvpuzmbNm/P+WTDZkRERPwRunXbzpx/+Pu/z/nP//k/
5SzE+D/OX//1fyneue+w1ffctZbBaWvqn0JERMQfmc0DU9YyNGM1bQP20ks/t4Uw/8d5++13cxp6
71pJ46AV3elBRETEH7FVnZOWX1Lz3QmAf13QMRq34vo+K2lARETErKWN/VbeMvi99ePKmgcy75u/
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
Jw3+08H42GgI9IuVOzY2Fup9IQnA1NSUNTa2hsxnYhIRETGCKga2tXeFf9rnCYDHxsrKSmtqavqj
+gN+HvjdlpaWRff5vjY3N1tFRYWShsnnmwBkHR4esd6+fuvrG0BERIyk/f2DCrIPws1xJjYOh3+b
7/8XwIvS6/OfHfw/InoyTj+XBMBPNJVKWTqdRkREjLT+X+P7nbf/XWz7i/LJu/8Qq+VzSQD8t4bF
fotARETEF68/Q5D9JuK5JACPHj2yvLw8e/nll23p0qX25ptvIiIi4g/okiVL7NVXX7UHDx48/ibg
PzwB+Prrr+3MmTP2wQcfWG5urp0/fx4RERF/QC9evGivv/56+BcBzy0B+Oqrr0JlK1assCtXroRk
ABEREX84z507F74FGB8fJwFARESMiiQAiIiIEZQEABERMYKSACAiIkZQEgBERMQISgKAiIgYQUkA
EBERIygJACIiYgQlAUBERIygJACIiIgRlAQAERExgpIAICIiRlASAERExAhKAoCIiBhBSQAQEREj
KAkAIiJiBCUBQEREjKAkAIiIiBGUBAARETGCkgAgIiJGUBIARETECEoCgIiIGEFJABARESMoCQAi
ImIEJQFARESMoCQAiIiIEZQEABERMYKSACAiIkZQEgBERMQISgKAiIgYQUkAEBERIygJACIiYgQl
AUBERIygJACIiIgRlAQAERExgpIAICIiRlASAERExAhKAoCIiBhBSQAQEREjKAkAIiJiBCUBQERE
jKAkAIiIiBGUBAARETGCkgAgIiJGUBIARETECEoCgIiIGEFJABARESMoCQAiImIEJQFARESMoCQA
iIiIEZQEABERMYKSACAiIkZQEgBERMQISgKAiIgYQUkAEBERIygJACIiYgQlAUBERIygJACIiIgR
lAQAERExgpIAICIiRlASAERExAhKAoCIiBhBSQAQEREjKAkAIiJiBCUBQEREjKAkAIiIiBGUBAAR
ETGCkgAgIiJGUBIARETECEoCgIiIGEFJABARESMoCQAiImIEJQFARESMoCQAiIiIEZQEABERMYKS
ACAiIkZQEgBERMQISgKAiIgYQUkAEBERIygJACIiYgQlAUBERIygJACIiIgRlAQAERExgpIAICIi
RlASAERExAhKAoCIiBhBSQAQEREjKAkAIiJiBCUBQEREjKAkAIiIiBGUBAARETGCkgAgIiJGUBIA
RETECEoCgIiIGEFJABARESMoCQAiImIEJQFARESMoCQAiIiIEZQEABERMYKSACAiIkZQEgBERMQI
SgKAiIgYQUkAEBERIygJACIiYgQlAUBERIygJACIiIgRlAQAERExgpIAICIiRlASAERExAhKAoCI
iBhBSQAQEREjKAkAIiJiBCUBQEREjKAkAIiIiBGUBAARETGCkgAgIiJGUBIARETECEoCgIiIGEFJ
ABARESMoCQAiImIEJQFARESMoCQAiIiIEZQEABERMYKSACAiIkZQEgBERMQISgKAiIgYQUkAEBER
IygJACIiYgQlAUBERIygJACIiIgRlAQAERExgpIAICIiRlASAERExAhKAoCIiBhBSQAQEREjKAkA
IiJiBCUBQEREjKAkAIiIiBGUBAARETGCkgAgIiJGUBIARETECEoCgIiIGEFJABARESMoCQAiImIE
JQFARESMoCQAiIiIEZQEABERMYKSACAiIkZQEgBERMQISgKAiIgYQUkAEBERIygJACIiYgQlAUBE
RIygJACIiIgRlAQAERExgpIAICIiRlASAERExAhKAoCIiBhBSQAQEREjKAkAIiJiBCUBQEREjKAk
AIiIiBGUBAARETGCkgAgIiJGUBIARETECEoCgIiIGEFJABARESMoCQAiImIEJQFARESMoCQAiIiI
EfSFJgArV660nJycUCkiIiL+cF64cMHeeuut55sAfP3113bq1Cl79dVX7ciRI7Zv3z5ERET8AT1w
4IC98sorzzcBmJubs5qaGlu+fLmtXbvWVq9ejYiIiD+ga9assY0bN2YCfyz2fBKA6elpS6VS4aeA
L7/8EhEREf8MfPTo0eNY/VwSAERERFxc//o9mUz+IGa/+s/6fBOAZNqmH87rb2Lx7U+aSEo1bnqR
bd9HneSMtyemspIpm0mnM+8X2/dJp6dtJqX2zs3ZzOys1HFP7+NlLvb5k4Z61QYvz88pnvmq5Rv6
OXodi/aL9vdtc7Nqi/4+eXw4t0XK+5aqO66y/VyyZXh7/LP0Qtue3N8/97Z4u7wO77PkImPh7+cf
qp+8nDmbnlfZj8vS39A/+izbf9lt/tfHInw+rzmhdi06JtrvyTZ6O9I6LmzTOaT8/J8+ZkGf2N72
Z5lrT5vQMSnV4+U/3TfPpNrmdS+67Y/o5+n1Pu7j7LmrHf9eG3ybz6vs2Hp/ZPs3jOETx3rZj68r
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</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="formMain" children="Controls">
    <Property name="AutoScaleDimensions">6, 13</Property>
    <Property name="AutoScaleMode">Font</Property>
    <Property name="ClientSize">1176, 498</Property>
    <Property name="Name">formMain</Property>
    <Property name="StartPosition">CenterScreen</Property>
    <Property name="Text">Grid Search</Property>
    <Event name="Load">formMain_Load</Event>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelToAutoCorrectTheseBl" children="Controls">
      <Property name="AutoSize">True</Property>
      <Property name="ForeColor">Red</Property>
      <Property name="Location">12, 464</Property>
      <Property name="Name">labelToAutoCorrectTheseBl</Property>
      <Property name="Size">937, 13</Property>
      <Property name="TabIndex">5</Property>
      <Property name="Text" xml:space="preserve">To auto correct these Blank entries for Status... Select the Modify Checklist option on the previous window, Select UpdateData, Select to Process the modified data, and the blanks will be corrected.
</Property>
    </Object>
    <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="textboxSearch" children="Controls">
      <Property name="Anchor">Top, Left, Right</Property>
      <Property name="Location">13, 15</Property>
      <Property name="Name">textboxSearch</Property>
      <Property name="Size">1069, 20</Property>
      <Property name="TabIndex">0</Property>
      <Event name="KeyDown">textboxSearch_KeyDown</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonSearch" children="Controls">
      <Property name="Anchor">Top, Right</Property>
      <Property name="Location">1088, 13</Property>
      <Property name="Name">buttonSearch</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">1</Property>
      <Property name="Text">&amp;Search</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonSearch_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="datagridviewResults" children="Controls">
      <Property name="AllowUserToAddRows">False</Property>
      <Property name="AllowUserToDeleteRows">False</Property>
      <Property name="Anchor">Top, Bottom, Left, Right</Property>
      <Property name="Location">12, 42</Property>
      <Property name="Name">datagridviewResults</Property>
      <Property name="ReadOnly">True</Property>
      <Property name="Size">1152, 415</Property>
      <Property name="TabIndex">2</Property>
      <Event name="ColumnHeaderMouseClick">datagridviewResults_ColumnHeaderMouseClick</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonExit" children="Controls">
      <Property name="Anchor">Bottom, Right</Property>
      <Property name="Location">1089, 463</Property>
      <Property name="Name">buttonExit</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">4</Property>
      <Property name="Text">E&amp;xit</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonExit_Click</Event>
    </Object>
  </Object>
  <Code><![CDATA[

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Item,
			[Parameter(Mandatory = $false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
			-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param (
			[ValidateNotNull()]
			$InputObject,
			[ValidateNotNull()]
			[System.Data.DataTable]$Table,
			[switch]$RetainColumns,
			[switch]$FilterWMIProperties)
	
	if ($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @( ,$Table)
}
#endregion

#region Search Function
function SearchGrid()
{
	$RowIndex = 0
	$ColumnIndex = 0
	$seachString = $textboxSearch.Text
	
	if($seachString -eq "")
	{
		return
	}
	
	if($datagridviewResults.SelectedCells.Count -ne 0)
	{
		$startCell = $datagridviewResults.SelectedCells[0];
		$RowIndex = $startCell.RowIndex
		$ColumnIndex = $startCell.ColumnIndex + 1
	}
	
	$columnCount = $datagridviewResults.ColumnCount
	$rowCount = $datagridviewResults.RowCount
	for(;$RowIndex -lt $rowCount; $RowIndex++)
	{
		$Row = $datagridviewResults.Rows[$RowIndex]
		
		for(;$ColumnIndex -lt $columnCount; $ColumnIndex++)
		{
			$cell = $Row.Cells[$ColumnIndex]
			
			if($null -ne $cell.Value -and $cell.Value.ToString().IndexOf($seachString, [StringComparison]::OrdinalIgnoreCase) -ne -1)
			{
				$datagridviewResults.CurrentCell = $cell
				return
			}
		}
		
		$ColumnIndex = 0
	}
	
	$datagridviewResults.CurrentCell = $null
	[void][System.Windows.Forms.MessageBox]::Show("The search has reached the end of the grid.","String not Found")
	
}
#endregion

$formMain_Load={
	#TODO: Initialize Form Controls here
	Update-DataGridView -DataGridView $datagridviewResults -Item ($script:ChecklistArray | where { $_.Status.length -eq 0 } | select Checklist, Vuln_num, Rule_ID, Severity, Status, Rule_Title, Group_Title, Comments, Finding_Details)
	
}

$buttonExit_Click={
	#TODO: Place custom script here
	$formMain.Close()
}

$buttonQuery_Click= {
	#TODO: Place custom script here
	#	---------------------------------
	#	Sample Code to Load Grid
	#	---------------------------------
	#	$processes = Get-WmiObject Win32_Process -Namespace 'Root\CIMV2'
	#	Update-DataGridView -DataGridView $datagridviewResults -Item $processes -AutoSizeColumns DisplayedCells
	#	---------------------------------
	#	Sample Code to Load Sortable Data
	#	---------------------------------
	# 	$processes = Get-WmiObject Win32_Process -Namespace 'Root\CIMV2'
	#	$table = ConvertTo-DataTable -InputObject $processes -FilterWMIProperties
	#	Update-DataGridView -DataGridView $datagridviewResults -Item $table -AutoSizeColumns DisplayedCells
}

$buttonSearch_Click={
	#TODO: Place custom script here
	SearchGrid
}

$datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	if($datagridviewResults.DataSource -is [System.Data.DataTable])
	{
		$column = $datagridviewResults.Columns[$_.ColumnIndex]
		$direction = [System.ComponentModel.ListSortDirection]::Ascending
		
		if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
		{
			$direction = [System.ComponentModel.ListSortDirection]::Descending
		}

		$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
	}
}

$textboxSearch_KeyDown=[System.Windows.Forms.KeyEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
	if($_.KeyCode -eq 'Enter' -and $buttonSearch.Enabled)
	{
		SearchGrid	
		$_.SuppressKeyPress = $true
	}
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
  </Assemblies>
</File>